-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS sets;
DROP TABLE IF EXISTS themes;
DROP TABLE IF EXISTS parts;
DROP VIEW IF EXISTS top_level_themes;
DROP VIEW IF EXISTS sets_years;
DROP TABLE IF EXISTS parts_fts;


-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE sets
(
set_num TEXT,
name TEXT,
year INTEGER,
theme_id INTEGER,
num_parts
);

CREATE TABLE themes
(
id INTEGER,
name TEXT,
parent_id INTEGER
);

CREATE TABLE parts
(
part_num TEXT,
name TEXT,
part_cat_id INTEGER,
part_material_id INTEGER
);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]


.import data/sets.csv sets
.import data/themes.csv themes
.import data/parts.csv parts


-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
SELECT COUNT(*) FROM sets;
SELECT COUNT(*) FROM parts;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX sets_index
ON sets (set_num);

CREATE INDEX themes_index
ON themes (id);

CREATE INDEX parts_index
ON parts (part_num);


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.i) Create the top_level themes VIEW

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW top_level_themes AS
SELECT id, name
FROM themes
WHERE parent_id = '';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(top_level_themes);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.ii) count the top level themes in the top_level_themes view.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) AS count
FROM top_level_themes;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Finding top level themes with the most sets.

-- [insert your SQL statement(s) BELOW this line]

SELECT t.name as theme, COUNT(*) as num_sets
FROM top_level_themes as t, sets
WHERE t.id = sets.theme_id
GROUP BY sets.theme_id
ORDER BY num_sets DESC
LIMIT 10;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Calculate a percentage

-- [insert your SQL statement(s) BELOW this line]


SELECT percents.theme as theme, printf("%.2f", percents.percent) as percentage FROM (
SELECT t.name AS theme, COUNT(*)*100.00/sum(COUNT(*)) over () as percent
FROM top_level_themes as t, sets
WHERE t.id = sets.theme_id
GROUP BY sets.theme_id
ORDER BY percent DESC
) as percents
WHERE percents.percent > 4.99;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Summarize a sub-theme

-- [insert your SQL statement(s) BELOW this line]

SELECT themes.name AS sub_theme, COUNT(*) as num_sets
FROM themes, sets
WHERE (themes.id = sets.theme_id AND themes.parent_id = 186)
GROUP BY sets.theme_id
ORDER BY num_sets DESC, sub_theme;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.i.) Create the sets VIEW

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW sets_years AS
SELECT ROWID, year, count(*) AS sets_count
FROM sets
GROUP BY year
ORDER BY year;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(sets_years);
SELECT AVG(sets_count) FROM sets_years;
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.ii) Find the running total of sets in the Rebrickable database each year

-- [insert your SQL statement(s) BELOW this line]

SELECT year, SUM(sets_count) OVER (ORDER BY year) AS running_total
FROM sets_years;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Create the FTS table and import data.

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE parts_fts USING fts3(part_num TEXT,
name TEXT,
part_cat_id INTEGER,
part_material_id INTEGER);

.import data/parts.csv parts_fts

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(parts_fts);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.i) Count the number of unique parts whose name field begins with the prefix ‘mini’.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(DISTINCT part_num) AS count_overview
FROM parts_fts
WHERE name LIKE 'mini%';

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.ii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘boy’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]

SELECT DISTINCT part_num as part_num_boy_minidoll
FROM parts_fts
WHERE
((name LIKE '% minidoll %') OR (name LIKE 'minidoll %') OR (name LIKE '% minidoll'))
AND
((name LIKE '% boy %') OR (name LIKE 'boy %') OR (name LIKE '% boy'))
AND
(name NOT LIKE '%minidoll % % % % % % %boy%')
AND
(name NOT LIKE '%boy % % % % % % %minidoll%');



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.iii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘girl’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]

SELECT DISTINCT part_num as part_num_girl_minidoll
FROM parts_fts
WHERE
((name LIKE '% minidoll %') OR (name LIKE 'minidoll %') OR (name LIKE '% minidoll'))
AND
((name LIKE '% girl %') OR (name LIKE 'girl %') OR (name LIKE '% girl'))
AND
(name NOT LIKE '%minidoll % % % % % % %girl%')
AND
(name NOT LIKE '%girl % % % % % % %minidoll%');

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --